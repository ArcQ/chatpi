use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :chatpi, ChatpiWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  reloadable_apps: [:chatpi],
  check_origin: false,
  watchers: []

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :chatpi, ChatpiWeb.Endpoint,
  live_reload: [
    interval: 1000
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Configure your database
#
#
config :chatpi, Chatpi.Repo,
  username: System.get_env("DB_USER") || "postgres",
  password: System.get_env("DB_PASS") || "pw123",
  database: System.get_env("CHATPI_DB_NAME") || "chatpi_dev",
  hostname: System.get_env("DB_HOST") || "localhost",
  pool_size: 10

config :arc,
  storage: Arc.Storage.Local

config :kaffe,
  producer: [
    endpoints: [{System.get_env("KAFKA_HOST"), 9092}],
    topics: ["chatpi-out-dev"],
    ssl: true,
    partition_strategy: :md5,
    sasl: %{
      mechanism: :plain,
      login: System.get_env("KAFKA_USER"),
      password: System.get_env("KAFKA_PASSWORD")
    }
  ],
  consumer: [
    endpoints: [{System.get_env("KAFKA_HOST"), 9092}],
    topics: ["chatpi-dev"],
    consumer_group: "chatpi-consumer",
    message_handler: Chatpi.MessageProcessor,
    offset_reset_policy: :reset_to_latest,
    max_bytes: 500_000,
    worker_allocation_strategy: :worker_per_topic_partition,
    ssl: true,
    sasl: %{
      mechanism: :plain,
      login: System.get_env("KAFKA_USER"),
      password: System.get_env("KAFKA_PASSWORD")
    }
  ]

config :chatpi, :env, :dev
